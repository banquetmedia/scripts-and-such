#!/usr/bin/python
# encoding: utf-8
"""
sudoku_solver.py

Created by Christopher Woodall on 2010-12-26.
Copyright (c) 2010 Happy Robot Labs. MIT License.
"""
__author__ = "Christopher Woodall"
__version__ = 0.01

class SudokuPuzzle(object):
	""" SudokuPuzzle extending object
		
		__init__
		__str__
		getValue
		generateBoxes (soon to be depreciated)
		
		self.rows: The rows in the Sudoku Puzzle, also the way data is fed in
		self.columns: The columns generated by list comprehension
		self.boxes: boxes generated by generateBoxes (soon to be replaced by list comprehension)
	"""
	def __init__(self, rows=[]):
		self.rows = rows
		self.columns = [[row[n] for row in self.rows] for n in range(len(self.rows[0]))]
		self.generateBoxes()
	
	
	def getValue(self, x, y):
		'''x is the column, y is the row'''
		return self.rows[y][x]
	
				
	def generateBoxes(self):
		'''Generates the Boxes from the Rows and Columns'''
		boxes = []
		rows = self.rows
		
		#- REPLACE WITH A LIST COMPREHENSION
		# need to make this code more elegant, but it does select the boxes.
		# range(0,13) is the smallest possible range, because for ever 3 boxes 
		# produced 2 null boxes are produced due to a fault in the algorithm.
		# Works, but needs optimization
		box_count = 0
		n = 0
		for a in range(0,13):
			box = []
			x = box_count * 3
			for row in rows[n:n+3]:
				box += row[x:x+3]
			if (box_count != 1) and (box_count % 3 == 1):
				n += 3
			if box_count <= 3:
				box_count += 1
			else:
				box_count = 0	
			if box:
				boxes.append(box)
		self.boxes = boxes
	
	
	def __str__(self):
		""" __str__: returns a string representation of a SudokuPuzzle
			
			Implemented using a list and appending to a list to create a more 
			efficient system. May improve by including list comprehension.
		"""
		sudoku = []
		
		row_count = 1
		
		for row in self.rows:
			if (row_count == 1) :
				sudoku.append('-------------\n')
			elif (row_count % 3 == 1) :
				sudoku.append('|---+---+---|\n')
				
			column_count = 1			
			for item in row:
				if (column_count % 3 == 1) :
					sudoku.append('|')				
				if item:
					sudoku.append(str(item))
				else:
					sudoku.append("0")			
				column_count += 1
			
			sudoku.append('|\n')
			row_count +=1
		
		sudoku.append('-------------\n')
		return ''.join(sudoku)
	


def main():
	a = SudokuPuzzle([[0,0,0,1,0,3,6,9,0],
					  [0,0,8,9,0,2,5,0,1],
					  [0,0,0,0,5,7,0,0,2],
					  [0,5,7,0,0,0,1,2,4],
					  [9,0,0,0,0,0,0,0,3],
					  [4,2,6,0,0,0,9,8,0],
					  [8,0,0,2,7,0,0,0,0],
					  [5,0,2,6,0,9,3,0,0],
					  [0,7,4,3,0,8,0,0,0]])			
	
	
	print a

		
if __name__ == '__main__':		
	main()
	